const ExpressUtility = require('../utilities/express')
const RouterUtility = require('../utilities/router')

module.exports = class AbstractController {
	/**
	 * @constructor
	 * @param {object} model - Cerberus model schema
	 * @param {object} dataAccess - Cerberus data access
	 */
	constructor(model, dataAccess) {
		this._model = model
		this._dataAccess = dataAccess
		this._router = RouterUtility.instanciateRouter()
		this._registerRoutes()
	}

	/**
	 * Get the router generated by the controller
	 * @returns {object} - Router
	 */
	getRouter() {
		return this._router
	}

	/**
	 * Register Routes
	 */
	_registerRoutes() {
		throw new Error('_registerRoutes must be overriden')
	}

	/**
	 * Return true if operation based on request method is private
	 * @param {string} method - Request method
	 * @return {boolean} - Is request method private
	 */
	_isPrivateRequest(method) {
		return this._model.private && this._model.private[ExpressUtility.methodToCRUD(method)]
	}

	/**
	 * Return true if operation based on request method is private
	 * @param {string} method - Request method
	 * @return {boolean} - Is request method private
	 */
	_isProtectedRequest(method) {
		return this._model.protected && (
			this._model.protected === true || this._model.protected[ExpressUtility.methodToCRUD(method)])
	}

	/**
	 * Return model with injected ownership
	 * @param {string} method - Request method
	 * @return {boolean} - Is request method private
	 */
	_addOwnershipToModel(user) {
		if (!user || this._model.global === true) {
			return this._model
		}

		return {
			...this._model,
			owner: user.id,
			skipOwnership: user.skipOwnership,
			skipRestrictions: user.skipRestrictions,
		}
	}

	/**
	 * Register route to the router
	 * @param {string} method - Request method
	 * @param {string} path - Endpoint path
	 * @param {function} callback - Async controller function
	 */
	_registerRoute(method, path, callback) {
		if (this._isPrivateRequest(method)) { return }

		if (this._isProtectedRequest(method)) {
			RouterUtility.protectRoute(this._router, method, path,
				`${this._model.name}.${ExpressUtility.methodToCRUD(method)}`)
		}
		RouterUtility.registerRoute(this._router, method, path, async (req, res) => {
			try {
				const response = await callback(this._addOwnershipToModel(req.user), req)

				res.status(ExpressUtility.getResponseStatus(method)).json(response)
			} catch (err) {
				ExpressUtility.handleError(res, err)
			}
		})
	}
}
